// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package multiplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultipleServiceClient is the client API for MultipleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultipleServiceClient interface {
	Multiple(ctx context.Context, in *MultipleRequest, opts ...grpc.CallOption) (MultipleService_MultipleClient, error)
}

type multipleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultipleServiceClient(cc grpc.ClientConnInterface) MultipleServiceClient {
	return &multipleServiceClient{cc}
}

func (c *multipleServiceClient) Multiple(ctx context.Context, in *MultipleRequest, opts ...grpc.CallOption) (MultipleService_MultipleClient, error) {
	stream, err := c.cc.NewStream(ctx, &MultipleService_ServiceDesc.Streams[0], "/multiplepb.MultipleService/Multiple", opts...)
	if err != nil {
		return nil, err
	}
	x := &multipleServiceMultipleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MultipleService_MultipleClient interface {
	Recv() (*MultipleResponse, error)
	grpc.ClientStream
}

type multipleServiceMultipleClient struct {
	grpc.ClientStream
}

func (x *multipleServiceMultipleClient) Recv() (*MultipleResponse, error) {
	m := new(MultipleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultipleServiceServer is the server API for MultipleService service.
// All implementations must embed UnimplementedMultipleServiceServer
// for forward compatibility
type MultipleServiceServer interface {
	Multiple(*MultipleRequest, MultipleService_MultipleServer) error
	mustEmbedUnimplementedMultipleServiceServer()
}

// UnimplementedMultipleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultipleServiceServer struct {
}

func (UnimplementedMultipleServiceServer) Multiple(*MultipleRequest, MultipleService_MultipleServer) error {
	return status.Errorf(codes.Unimplemented, "method Multiple not implemented")
}
func (UnimplementedMultipleServiceServer) mustEmbedUnimplementedMultipleServiceServer() {}

// UnsafeMultipleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultipleServiceServer will
// result in compilation errors.
type UnsafeMultipleServiceServer interface {
	mustEmbedUnimplementedMultipleServiceServer()
}

func RegisterMultipleServiceServer(s grpc.ServiceRegistrar, srv MultipleServiceServer) {
	s.RegisterService(&MultipleService_ServiceDesc, srv)
}

func _MultipleService_Multiple_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultipleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultipleServiceServer).Multiple(m, &multipleServiceMultipleServer{stream})
}

type MultipleService_MultipleServer interface {
	Send(*MultipleResponse) error
	grpc.ServerStream
}

type multipleServiceMultipleServer struct {
	grpc.ServerStream
}

func (x *multipleServiceMultipleServer) Send(m *MultipleResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MultipleService_ServiceDesc is the grpc.ServiceDesc for MultipleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultipleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiplepb.MultipleService",
	HandlerType: (*MultipleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Multiple",
			Handler:       _MultipleService_Multiple_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "multiplepb.proto",
}
